# Even Fibonacci numbers
# Problem 2 
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


## Print sequence first
a = 0 
b = 1

L = [] # put resutl into a list

n = 100
while n > 0:
    ## print(b)
    L.append(b)
    if b >= 4000000:
        break
    tmp = b
    b = b + a
    a = tmp
    n = n - 1
else:
    print('END')

print(L, '\n')

## get useful valuse from the list
LNew = []

# Two way of doing it, change 'True' to 'False' to see it
if True:
    for num in L:
        if num % 2 == 0:
            LNew.append(num)
    print('LNew:', LNew, '\n')
else:
    LNew = list(filter(lambda x: x % 2 == 0, L))
    print(LNew, '\n')


sum = 0
for num in LNew:
    sum = sum + num

print('Answer:', sum)


# # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]

# # LNew: [2, 8, 34, 144, 610, 2584, 10946, 46368, 196418, 832040, 3524578]

# # Answer: 4613732
# # Press any key to continue . . .


### Reference: 
# # This may be a small improvement.  The Fibonacci series is:
# # 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
# # Now, replacing an odd number with O and an even with E, we get:
# # O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
# # And so each third number is even.  We don't need to calculate the odd numbers.  Starting from an two odd terms x, y, the series is:
# # x, y, x + y, x + 2y, 2x + 3y, 3x + 5y
# # And in Python, my solution is:
# # Python
# # Hide Code
# # def calcE():
# # 	x = y = 1
# # 	sum = 0
# # 	while (sum < 1000000):
# # 		sum += (x + y)
# # 		x, y = x + 2 * y, 2 * x + 3 * y
# # 	return sum
# # With this, you don't need to use an % to calculate if a number is even.  Using a fast computer, this took less than 0.01 secs to calculate.

def calcE():
	x = y = 1
	sum = 0
	while (sum < 4000000):
		sum += (x + y)
		x, y = x + 2 * y, 2 * x + 3 * y
	return sum

print(calcE())
